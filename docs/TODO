All:
    - multi-line read
    - loop/recur ?
    - hash-maps with non-string keys
    - hash-map with space in key string (make)
    - keyword type
    - gensym reader inside quasiquote
    - can let* and quasiquote be TCO'd ?

    - per impl tests for step5_tco, step9_interop (if possible)
    - regular expression matching in runtest
    - Print full exception when test gets EOF from expect

    - Break out impl eval into step0.5
    - Fix quasiquoting of vectors

---------------------------------------------

Bash:

C:
    - come up with better way to do 20 vararg code

C#:
    - step9_interop
    - use same history file

Clojure:

Java:
    - step9_interop
    - store ILambda in function (like c#)?

Javascript:

Make:
    - allow '_' in make variable names
    - errors should propagate up from within load-file


Mal:
    - line numbers in errors
    - step6_file: command line arguments
    - step5_tco
    - step9_interop

PHP:

Postscript:
    - negative numbers

Python:

Ruby:
    - save history and use same history file
    - setup require search path


---------------------------------------------


Future Implementations:

    - Rust:
        - http://www.rustforrubyists.com/book/index.html
        - http://static.rust-lang.org/doc/0.9/complement-cheatsheet.html
        - http://pzol.github.io/getting_rusty/
        - release notes:
            - https://github.com/mozilla/rust/wiki/Doc-detailed-release-notes
        - this week in rust:
            - http://cmr.github.io/
        - readline:
            - http://redbrain.co.uk/2013/11/09/rust-and-readline-c-ffi/
            - http://www.reddit.com/r/rust/comments/1q9pqc/rust_cffi_and_readline/
            - https://github.com/dbp/rustrepl
        - hash-map:
            - http://static.rust-lang.org/doc/master/std/hashmap/index.html
            - http://static.rust-lang.org/doc/master/std/hashmap/struct.HashMap.html
        - vector/list:
            - http://static.rust-lang.org/doc/master/std/vec/index.html
        - example code:
            - https://github.com/dradtke/rust-dominion/blob/master/dominion/mod.rs

    - Redmonk languages from Jan 2014:
        http://sogrady-media.redmonk.com/sogrady/files/2014/01/lang-rank-114-wm.png
    
        - Tier 1
            * JavaScript
            * Java
            * PHP
            * C#
            * Python
            - C++
            * Ruby
            * C
            - Objective-C
            - Perl 
            * Shell (Bash 4)

        - Tier 2
            - Scala
            - Haskell
            * Clojure
            - CoffeeScript
            - Visual Basic
            - Groovy
            - Go
            - Lua
            - Erlang
            - Emacs Lisp
            - Assembly
            - Scheme
            - FORTRAN
            - Dart
            - F#
            - D

        - Tier 3
            - TypeScript
            - Racket
            - HaXe
            - Pascal
            - VimL
                - https://github.com/tpope/timl
            - Common Lisp
            - Rust
            - M (OpenM/MUMPS)
            - Factor (Stack-based)

    - Others:
        - Forth (Stack-based)
        - BF (Crazy)

